{
  "openapi": "3.0.0",
  "info": {
    "title": "petly-backend docsI",
    "description": "This is a simple API",
    "contact": {
      "email": "you@your-company.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "2.0"
  },
  "servers": [
    {
      "url": "http://localhost:4000/api",
      "description": "API on localhost"
    },
    {
      "url": "https://petly-backend.onrender.com/api",
      "description": "API on server"
    }
  ],
  "tags": [
    {
      "name": "auth",
      "description": "Autorization endpoints"
    },
    {
      "name": "notices",
      "description": "Notice's endpoints"
    },
    {
      "name": "users",
      "description": "User's endpoints"
    },
    {
      "name": "friends",
      "description": "Friends endpoints"
    },
    {
      "name": "news",
      "description": "News endpoints"
    }

  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "User registration",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/Register"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201-CreatedUser"
          },
          "400": {
            "$ref": "#/components/responses/400-BadRequest"
          },
          "409": {
            "$ref": "#/components/responses/409-RegisterError"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "User login",
        "parameters": [],
        "requestBody": {
          "$ref": "#/components/requestBodies/Login"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200-Login"
          },
          "400": {
            "$ref": "#/components/responses/400-BadRequest"
          },
          "409": {
            "$ref": "#/components/responses/409-LoginError"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "User logout",
        "parameters": [],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "Remove user's token",
            "content": {}
          },
          "401": {
            "$ref": "#/components/responses/401-NotAutorized"
          }
        }
      }
    },
    "/auth/update": {
      "put": {
        "tags": [
          "auth"
        ],
        "summary": "Updating user data",
        "parameters": [],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateUser"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200-Update"
          },
          "400": {
            "$ref": "#/components/responses/400-BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/401-NotAutorized"
          },
          "409": {
            "$ref": "#/components/responses/409-ChangeUserError"
          }
        }
      }
    },
    "/notices/category/{categoryName}": {
      "get": {
        "tags": [
          "notices"
        ],
        "summary": "Робота з оголошеннями (Не дороблено)",
        "parameters": [
          {
            "in": "path",
            "name": "categoryName",
            "schema": {
              "type": "string",
              "enum": [
                "sell",
                "lostfound",
                "ingoodhands"
              ]
            },
            "required": true,
            "description": "One category with ['sell','ingoodhands','lostfound']"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200-GetNotices"
          },
          "400": {
            "$ref": "#/components/responses/400-BadRequest"
          }
        }
      }
    },
    "/notices/notice/{id}": {
      "get": {
        "tags": [
          "notices"
        ],
        "summary": "Return notice by id",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "description": "Notice's id",
              "example": "63d9c87277ab211223ccd24d"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200-NoticeById"
          },
          "400": {
            "$ref": "#/components/responses/400-BadRequestBadId"
          },
          "404": {
            "$ref": "#/components/responses/404-NotFoundGetNoticeById"
          }
        }
      }
    },
    "/notices/notice": {
      "post": {
        "tags": [
          "notices"
        ],
        "summary": "Creates an notice for an authorized user",
        "parameters": [],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/NoticeCreate"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201-NoticeCreated"
          },
          "400": {
            "$ref": "#/components/responses/400-BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/401-NotAutorized"
          }
        }
      }
    },
    "/users/current":{
      "get":{
        "tags":[
          "users"
        ],
        "summary": "Get current user",
        
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentUserRes"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401-NotAutorized"
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": "message: Server error"
              }
            }
          }
        }
    }
    },
    "/users/pets":{
      "post": {
        "tags": ["users"],
        "summary": "Add pets",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [],
        "requestBody": {
          "description": "Object of user pet",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/addPet"
              }
            }
          }
        },
        "responses":{
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewPet"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400-BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/401-NotAutorized"
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": "message: Server error"
              }
            }
          }
        }
      }
    },
    "/users/pets/{id}": {
      "delete": {
        "tags": ["users"],
        "summary": "Add pets",
        "parameters": [{
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Pet's id"
        }],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/400-BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/401-NotAutorized"
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": "message: Server error"
              }
            }
          }
        }
      }
    },
    "/friends":{
       "get": {
        "tags": [
          "friends"
        ],
        "summary": "Get friends",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FriendsRes"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404-NotFound"
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": "message: Server error"
              }
            }
          }
        }
      }
    },
    "/news": {
      "get": {
        "tags": ["news"],
        "summary": "Get news",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewsRes"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404-NotFound"
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "example": "message: Server error"
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegisterBody": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "user's email"
          },
          "password": {
            "type": "string",
            "description": "user's password"
          },
          "name": {
            "type": "string",
            "description": "user's name"
          },
          "location": {
            "type": "string",
            "description": "user's location"
          },
          "phone": {
            "type": "string",
            "description": "user's phone"
          }
        }
      },
      "UserCreatedBody": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "user's email"
          },
          "name": {
            "type": "string",
            "description": "user's name"
          },
          "location": {
            "type": "string",
            "description": "user's location"
          },
          "phone": {
            "type": "string",
            "description": "user's phone"
          }
        }
      },
      "LoginBody": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "user's email"
          },
          "password": {
            "type": "string",
            "description": "user's password"
          }
        }
      },
      "UserLoginedBody": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "format": "JWT",
            "description": "User's token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYzY2Q5OGQ0ZWM1NzQ3ZjVjNDg0YjVlMSIsImlhdCI6MTY3NDQxODcyOCwiZXhwIjoxNjc0NDIyMzI4fQ.qmrt-kGVp-uJrhmBUt7NKLfBIhjGO7KvJC9KmX6Ujc8"
          }
        }
      },
      "UpdateUserBody": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "user's email",
            "example": "marta@gmail.com"
          },
          "name": {
            "type": "string",
            "description": "user's name",
            "example": "marta"
          },
          "location": {
            "type": "string",
            "description": "user's location",
            "example": "Kovel, Lutsk"
          },
          "phone": {
            "type": "string",
            "description": "user's phone",
            "example": "380631234321"
          },
          "birthdate": {
            "type": "string",
            "format": "date",
            "description": "User's birthdate",
            "example": "09-17-2002"
          },
          "avatar": {
            "type": "string",
            "format": "binary",
            "description": "user's photo"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "user's email"
          },
          "password": {
            "type": "string",
            "description": "user's password"
          },
          "name": {
            "type": "string",
            "description": "user's name"
          },
          "location": {
            "type": "string",
            "description": "user's location"
          },
          "phone": {
            "type": "string",
            "description": "user's phone"
          },
          "avatar": {
            "type": "string",
            "format": "binary",
            "description": "User's photo"
          },
          "birthdate": {
            "type": "string",
            "format": "date-time",
            "description": "User's birthdate"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Any validation error"
          }
        },
        "required": ["message"]
      },
      "ResponseNoticeById": {
        "type": "object",
        "properties": {
          "notice": {
            "type": "object",
            "properties": {
              "avatar": {
                "type": "object",
                "properties": {
                  "public_id": {
                    "type": "string",
                    "description": "public ID on Cloudinary"
                  },
                  "url": {
                    "type": "string",
                    "description": "Url to file on Cloudinary"
                  }
                }
              },
              "_id": {
                "type": "string",
                "format": "uuid",
                "description": "Notice's id"
              },
              "category": {
                "type": "string",
                "enum": ["sell", "lostfound", "ingoodhands"]
              },
              "title": {
                "type": "string",
                "description": "The name of the notice"
              },
              "name": {
                "type": "string",
                "description": "the name of the animal"
              },
              "sex": {
                "type": "string",
                "description": "The sex of the animal",
                "enum": ["male", "female"]
              },
              "birthdate": {
                "type": "string",
                "format": "date",
                "description": "Pet's birthday"
              },
              "breed": {
                "type": "string",
                "description": "Type breed of pet"
              },
              "location": {
                "type": "string",
                "description": "location (city, region)"
              },
              "price": {
                "oneOf": [
                  {
                    "type": "integer",
                    "minimum": 1,
                    "description": "Sale price of the pet"
                  },
                  {
                    "type": "integer",
                    "nullable": true,
                    "description": "No price for category: \"ingoodhands\" and \"lostfound\""
                  }
                ]
              },
              "comments": {
                "type": "string",
                "description": "Коментарі до оголошення"
              },
              "owner": {
                "type": "string",
                "format": "uuid",
                "description": "Id of the user who created the notice"
              }
            }
          },
          "user": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "format": "email",
                "description": "User's email"
              },
              "phone": {
                "type": "string",
                "description": "User's phone"
              }
            }
          }
        }
      },
      "NoticeBody": {
        "type": "object",
        "properties": {
          "avatar": {
            "type": "string",
            "format": "binary"
          },
          "category": {
            "type": "string",
            "enum": ["sell", "lostfound", "ingoodhands"],
            "example": "sell"
          },
          "title": {
            "type": "string",
            "description": "The name of the message",
            "example": "Сute dog looking for a home"
          },
          "name": {
            "type": "string",
            "description": null,
            "example": "Rich"
          },
          "sex": {
            "type": "string",
            "enum": ["male", "female"],
            "example": "male"
          },
          "birthdate": {
            "type": "string",
            "format": "date",
            "description": "Pet's birthday",
            "example": "2021-09-20T21:00:00.000Z"
          },
          "breed": {
            "type": "string",
            "description": "Type breed of pet",
            "example": "Border Terrier"
          },
          "location": {
            "type": "string",
            "description": "location (city, region)",
            "example": "Lviv,Lviv"
          },
          "price": {
            "oneOf": [
              {
                "type": "integer",
                "minimum": 1,
                "description": "Sale price of the pet"
              },
              {
                "type": "integer",
                "nullable": true,
                "description": "No price for category: \"ingoodhands\" and \"lostfound\""
              }
            ],
            "example": [350, null]
          },
          "comments": {
            "type": "string",
            "description": null,
            "example": "Lorem ipsum dolor sit amet, consectetur Lorem ipsum color sit amet"
          }
        }
      },
      "CreatedNoticeBody": {
        "type": "object",
        "properties": {
          "avatar": {
            "type": "object",
            "properties": {
              "public_id": {
                "type": "string",
                "description": "public ID on Cloudinary",
                "example": "notices/63d9c87277ab211223ccd24d.png"
              },
              "url": {
                "type": "string",
                "description": "Url to file on Cloudinary",
                "example": "http://res.cloudinary.com/petlydata/image/upload/v1675217011/notices/63d9c87277ab211223ccd24d.png.png"
              }
            }
          },
          "_id": {
            "type": "string",
            "format": "uuid",
            "description": "Notice's id",
            "example": "63d9c87277ab211223ccd24d"
          },
          "category": {
            "type": "string",
            "enum": ["sell", "lostfound", "ingoodhands"]
          },
          "title": {
            "type": "string",
            "description": "The name of the message",
            "example": "Сute dog looking for a home,"
          },
          "name": {
            "type": "string",
            "description": "null",
            "example": "Rich"
          },
          "sex": {
            "type": "string",
            "enum": ["male", "female"],
            "example": "male"
          },
          "birthdate": {
            "type": "string",
            "format": "date",
            "description": "Pet's birthday",
            "example": "8-22-2021"
          },
          "breed": {
            "type": "string",
            "description": "Type breed of pet",
            "example": "Border Terrier"
          },
          "location": {
            "type": "string",
            "description": "location (city, region)",
            "example": "Lviv,Lviv"
          },
          "price": {
            "oneOf": [
              {
                "type": "integer",
                "minimum": 1,
                "description": "Sale price of the pet"
              },
              {
                "type": "integer",
                "nullable": true,
                "description": "No price for category: \"ingoodhands\" and \"lostfound\""
              }
            ],
            "example": 350
          },
          "comments": {
            "type": "string",
            "description": "null",
            "example": "Lorem ipsum dolor sit amet, consectetur Lorem ipsum color sit amet"
          },
          "owner": {
            "type": "string",
            "format": "uuid",
            "example": "63df647b3a21961fd722c3c5"
          }
        }
      },
      "CurrentUserRes": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "format": "uuid",
            "description": "Notice's id",
            "example": "63d9c87277ab211223ccd24d"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "user's email",
            "example": "marta@gmail.com"
          },
          "name": {
            "type": "string",
            "description": "user's name",
            "example": "marta"
          },
          "location": {
            "type": "string",
            "description": "user's location",
            "example": "Kovel, Lutsk"
          },
          "phone": {
            "type": "string",
            "description": "user's phone",
            "example": "+380631234321"
          },
          "birthdate": {
            "type": "string",
            "format": "date",
            "description": "User's birthdate",
            "example": "1986-03-20T22:00:00.000+00:00"
          },
          "avatar": {
            "type": "string",
            "format": "binary",
            "description": "user's photo"
          },
          "favorite": {
            "type": "array",
            "description": "user's ads added to favorite ",
            "example": ["63e155b5552a2f02a08e009f", "63dd7b4247642a3b99b5b5f2"]
          },
          "pets": {
            "type": "array",
            "example": [
              {
                "avatar": {
                  "public_id": "pets/63e24efd79bb76084b355870.png",
                  "url": "http://res.cloudinary.com/"
                },
                "_id": "63e24efd79bb76084b355870",
                "name": "Tom",
                "birthdate": "2000-05-31T21:00:00.000Z",
                "breed": "street",
                "comments": "Good cat, love mouse"
              }
            ],
            "description": "user's pets "
          }
        }
      },
      "addPet": {
        "type": "object",
        "required": ["name", "avatar"],
        "properties": {
          "avatar": {
            "type": "string",
            "format": "binary"
          },
          "name": {
            "type": "string",
            "example": "Mars"
          },
          "birthdate": {
            "type": "string",
            "example": "2000-05-31T21:00:00.000Z"
          },
          "breed": {
            "type": "string",
            "example": "metis"
          },
          "comments": {
            "type": "string",
            "example": "Good guard, smart"
          }
        }
      },
      "NewPet": {
        "type": "object",
        "properties": {
          "avatar": {
            "type": "object",
            "example": {
              "public_id": "pets/63e3664dfa566cd6471ca07c.png",
              "url": "http://res.cloudinary.com/petlydata/image/upload/v1675847247/pets/63e3664dfa566cd6471ca07c.png.png"
            }
          },
          "name": {
            "type": "string",
            "example": "Mars"
          },
          "birthday": {
            "type": "string",
            "example": "2000-12-01T21:00:00.000Z"
          },
          "breed": {
            "type": "string",
            "example": "metis"
          },
          "comments": {
            "type": "string",
            "example": "Good guard, smart"
          },
          "owner": {
            "type": "string",
            "example": "63e11fb9cc40d9212901319c"
          },
          "_id": {
            "type": "string",
            "example": "63e3664dfa566cd6471ca07c"
          }
        }
      },
      "FriendsRes": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "example": "63e35ecf9019e5da4cc5ec67"
            },
            "name": {
              "type": "string",
              "example": "Барбос"
            },
            "url": {
              "type": "string",
              "example": "https://uk-ua.facebook.com/NGO.Barbos/"
            },
            "addressUrl": {
              "type": "string",
              "example": "https://www.google.com/maps/place/Barbos/@48.6292889,22.2443462,17z/data=!4m14!1m7!3m6!1s0x473919ec14c54479:0x846bd36a9317b036!2sBarbos!8m2!3d48.6292854!4d22.2465349!16s%2Fg%2F11c603frrn!3m5!1s0x473919ec14c54479:0x846bd36a9317b036!8m2!3d48.6292854!4d22.2465349!16s%2Fg%2F11c603frrn"
            },
            "logo": {
              "type": "string",
              "example": "https://res.cloudinary.com/petlydata/image/upload/v1675185609/logo/logo2_cibuix.png"
            },
            "worktime": {
              "type": "array"
            },
            "adress": {
              "type": "string",
              "example": "Grigorenka Street, 25"
            },
            "phone": {
              "type": "string",
              "example": "0664880480"
            },
            "email": {
              "type": "string",
              "example": "barbos@gmail.com"
            }
          }
        }
      },
      "NewsRes": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "example": "63cf3c787f33391be8d304d1"
            },
            "title": {
              "type": "string",
              "example": "Обережно, кліщі! Як уберегти улюбленця"
            },
            "text": {
              "type": "string",
              "example": "Травневі прогулянки з улюбленцем не лише приємні, але й потребують пильності."
            },
            "data": {
              "type": "string",
              "example": "2021-02-20"
            },
            "url": {
              "type": "string",
              "example": "https://www.kmlvm.com.ua/oberezhno-klishhi-yak-uberegty-ulyublentsya-vid-nepryyemnostej/"
            }
          }
        }
      }
    },
    "requestBodies": {
      "Register": {
        "description": "Registration user's object",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RegisterBody"
            },
            "examples": {
              "user": {
                "$ref": "#/components/examples/user"
              },
              "vasya": {
                "$ref": "#/components/examples/vasya"
              }
            }
          }
        }
      },
      "Login": {
        "description": "Login user's object",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/LoginBody"
            },
            "examples": {
              "user": {
                "value": {
                  "email": "user@gmail.com",
                  "password": "user1234"
                }
              },
              "vasya": {
                "value": {
                  "email": "vasya@gmail.com",
                  "password": "password1234"
                }
              }
            }
          }
        }
      },
      "UpdateUser": {
        "description": "Registration's object",
        "required": true,
        "content": {
          "multipart/form-data": {
            "schema": {
              "$ref": "#/components/schemas/UpdateUserBody"
            }
          }
        }
      },
      "NoticeCreate": {
        "description": "Notice's object",
        "required": true,
        "content": {
          "multipart/form-data": {
            "schema": {
              "$ref": "#/components/schemas/NoticeBody"
            }
          }
        }
      }
    },
    "responses": {
      "201-CreatedUser": {
        "description": "User Created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UserCreatedBody"
            },
            "examples": {
              "user": {
                "$ref": "#/components/examples/user"
              },
              "vasya": {
                "$ref": "#/components/examples/vasya"
              }
            }
          }
        }
      },
      "200-Login": {
        "description": "A token for the user is returned",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UserLoginedBody"
            }
          }
        }
      },
      "200-Update": {
        "description": "Returns updated user data",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateUserBody"
            },
            "examples": {
              "updateUser": {
                "$ref": "#/components/examples/UpdateUser"
              }
            }
          }
        }
      },
      "200-NoticeById": {
        "description": "Returns notice by id",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ResponseNoticeById"
            },
            "examples": {
              "Category 'Sell'": {
                "$ref": "#/components/examples/NoticeBySellCategory"
              },
              "Category 'lostfound'": {
                "$ref": "#/components/examples/NoticeByLostfoundCategory"
              },
              "Category 'ingoodhands'": {
                "$ref": "#/components/examples/NoticeByIngoodhandsCategory"
              }
            }
          }
        }
      },
      "201-NoticeCreated": {
        "description": "Return created notice",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreatedNoticeBody"
            }
          }
        }
      },
      "400-BadRequest": {
        "description": "Bad request. Validation error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "400-BadRequestBadId": {
        "description": "Bad request. Invalid id",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "message": "Invalid id"
            }
          }
        }
      },
      "401-NotAutorized": {
        "description": "User not authorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "message": "Not"
            }
          }
        }
      },
      "404-NotFoundGetNoticeById": {
        "description": "Not find notice with this id",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "message": "Not found"
            }
          }
        }
      },
      "404-NotFound": {
        "description": "Not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "message": "Not found"
            }
          }
        }
      },
      "409-RegisterError": {
        "description": "User not created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "message": "Email in use"
            }
          }
        }
      },
      "409-LoginError": {
        "description": "Error login",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "message": "Email or password is wrong"
            }
          }
        }
      },
      "409-ChangeUserError": {
        "description": "Changing the user's mail to an already existing one",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "message": "Email in use"
            }
          }
        }
      }
    },
    "examples": {
      "user": {
        "value": {
          "email": "user@gmail.com",
          "password": "user1234",
          "name": "user",
          "location": "Kyiv, Kyiv",
          "phone": "+380981234567"
        }
      },
      "vasya": {
        "value": {
          "email": "vasya@gmail.com",
          "password": "password1234",
          "name": "vasya",
          "location": "Brovary, Kyiv",
          "phone": "+380661734547"
        }
      },
      "UpdateUser": {
        "value": {
          "email": "marta@gmail.com",
          "name": "marta",
          "location": "Kovel, Lutsk",
          "phone": "+380631234321",
          "birthdate": "09-17-2002",
          "avatar": "users\\63d0e44bcef6ec0c774d22e0.jpg"
        }
      },
      "NoticeSellCategory": {
        "value": {
          "avatar": {
            "public_id": "notices/63d9c87277ab211223ccd24d.png",
            "url": "http://res.cloudinary.com/petlydata/image/upload/v1675217011/notices/63d9c87277ab211223ccd24d.png.png"
          },
          "_id": "63d9c87277ab211223ccd24d",
          "title": "Сute dog looking for a home",
          "birthdate": "8-22-2021",
          "breed": "Border Terrier",
          "location": "Lviv, Lviv",
          "price": 150
        }
      },
      "NoticeNoSellCategory": {
        "value": {
          "avatar": {
            "public_id": "notices/63d9c87277ab211223ccd24d.png",
            "url": "http://res.cloudinary.com/petlydata/image/upload/v1675217011/notices/63d9c87277ab211223ccd24d.png.png"
          },
          "_id": "63d9c87277ab211223ccd24d",
          "title": "Сute dog looking for a home",
          "birthdate": "8-22-2021",
          "breed": "Border Terrier",
          "location": "Lviv, Lviv"
        }
      },
      "NoticeBySellCategory": {
        "value": {
          "notice": {
            "avatar": {
              "public_id": "notices/63d9c87277ab211223ccd24d.png",
              "url": "http://res.cloudinary.com/petlydata/image/upload/v1675217011/notices/63d9c87277ab211223ccd24d.png.png"
            },
            "_id": "63d9c87277ab211223ccd24d",
            "category": "sell",
            "title": "Сute dog looking for a home",
            "name": "Rich",
            "birthdate": "2020-09-21T00:00:00.000Z",
            "breed": "Pomeranian",
            "sex": "male",
            "location": "Lviv, Lviv",
            "price": 150,
            "comments": "Lorem ipsum dolor sit amet, consectetur Lorem ipsum color sitamet",
            "owner": "63d839a21f3fce6f49c6a2c7"
          },
          "user": {
            "email": "vasya321@ukr.net",
            "phone": "+380952183123"
          }
        }
      },
      "NoticeByLostfoundCategory": {
        "value": {
          "notice": {
            "avatar": {
              "public_id": "notices/63d9c87277ab211223ccd24d.png",
              "url": "http://res.cloudinary.com/petlydata/image/upload/v1675217011/notices/63d9c87277ab211223ccd24d.png.png"
            },
            "_id": "63d9c87277ab211223ccd24d",
            "category": "lostfound",
            "title": "Сute dog looking for a home",
            "name": "Rich",
            "birthdate": "2020-09-21T00:00:00.000Z",
            "breed": "Pomeranian",
            "sex": "male",
            "location": "Lviv, Lviv",
            "comments": "Lorem ipsum dolor sit amet, consectetur Lorem ipsum color sitamet",
            "owner": "63d839a21f3fce6f49c6a2c7"
          },
          "user": {
            "email": "starpetya78@gmail.com",
            "phone": "+380931234567"
          }
        }
      },
      "NoticeByIngoodhandsCategory": {
        "value": {
          "notice": {
            "avatar": {
              "public_id": "notices/63d9c87277ab211223ccd24d.png",
              "url": "http://res.cloudinary.com/petlydata/image/upload/v1675217011/notices/63d9c87277ab211223ccd24d.png.png"
            },
            "_id": "63d9c87277ab211223ccd24d",
            "category": "ingoodhands",
            "title": "Сute dog looking for a home",
            "name": "Rich",
            "birthdate": "2020-09-21T00:00:00.000Z",
            "breed": "Pomeranian",
            "sex": "male",
            "location": "Lviv, Lviv",
            "comments": "Lorem ipsum dolor sit amet, consectetur Lorem ipsum color sitamet",
            "owner": "63d839a21f3fce6f49c6a2c7"
          },
          "user": {
            "email": "starpetya78@gmail.com",
            "phone": "+380931234567"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}